#ifdef VERTEX                                 
                                              
attribute vec3 a_Position;                    
attribute vec2 a_TexCoord;                    
attribute vec3 a_Normal;                      
                                              
uniform mat4 u_Projection;                    
uniform mat4 u_Model;  
uniform mat4 u_View;                       
                                              
varying vec3 v_Normal;                        
varying vec2 v_TexCoord;
varying vec3 v_FragPos;                      
                                              
void main()                                   
{    
	v_Normal = mat3(u_Model) * a_Normal;  
	v_FragPos = vec3(u_Model * vec4(a_Position, 1.0));                                    
 	gl_Position = u_Projection * u_View *               
	u_Model * vec4(a_Position, 1);            
                                              
                         
	v_TexCoord = a_TexCoord;                    
}                                             
                                              
#endif                                        
#ifdef FRAGMENT                               
                                              
uniform sampler2D u_Texture; 
uniform vec3 u_Emissive;
uniform vec3 u_Ambient;
uniform vec3 u_LightPos;                 
                                              
varying vec3 v_Normal;                        
varying vec2 v_TexCoord;
varying vec3 v_FragPos;                      
                                              
void main()                                   
{           
	vec4 tex = texture2D(u_Texture, v_TexCoord);
	vec3 N = normalize(v_Normal);
	vec3 V = normalize(u_LightPos - v_FragPos);  
	
        float diff = max(dot(N, V), 0.0);
	vec3 diffuseColor = vec3(1,1,1);
	vec3 diffuse = diff * diffuseColor;  
        vec3 lighting = u_Emissive + u_Ambient + diffuse;           
	gl_FragColor = tex * vec4(lighting, 1.0);  
    
	if(gl_FragColor.x == 9) gl_FragColor.x = v_Normal.x;  
}                                             
                                              
#endif                                        