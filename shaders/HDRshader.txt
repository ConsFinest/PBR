#ifdef VERTEX                                 
                                              
attribute vec3 a_Position;
                                         
                                              
uniform mat4 u_Projection;                     
uniform mat4 u_View;                       
                                              
varying vec3 v_FragPos; 
                    
                                              
void main()                                   
{    
	v_FragPos = a_Position;
	gl_Position = u_Projection * u_View * vec4(v_FragPos, 1.0);
	                   
}                                             
                                              
#endif                                        
#ifdef FRAGMENT                               
                                            
varying vec3 v_FragPos;

uniform sampler2D equirectangularMap;

const vec2 invAtan = vec2(0.1591, 0.3183);
vec2 SampleSphericalMap(vec3 v)
{
	vec2 uv = vec2(atan(v.z, v.x), asin(v.y));
	uv *= invAtan;
	uv += 0.5;
	return uv;
}                    
                                              
void main()                                   
{          
	 
	vec2 uv = SampleSphericalMap(normalize(v_FragPos));
	
	float colorR = texture2D(equirectangularMap, uv).r;
 	float colorG = texture2D(equirectangularMap, uv).g;
	float colorB = texture2D(equirectangularMap, uv).b;
	vec3 color = vec3(colorR, colorG, colorB);	
	gl_FragColor = vec4(color, 1.0);
}                                             
                                              
#endif                                        